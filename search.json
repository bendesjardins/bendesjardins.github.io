[
  {
    "objectID": "blog-listing.html",
    "href": "blog-listing.html",
    "title": "Benjamin DesJardins",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n  \n\n\n\n\nSpotify Data\n\n\n\n\n\n\n\n\n\nDec 11, 2023\n\n\nBenjamin DesJardins\n\n\n2 min\n\n\n\n\n\n\n  \n\n\n\n\nNYC Restaurant Inspection\n\n\n\n\n\n\n\n\n\nDec 11, 2023\n\n\nBenjamin DesJardins\n\n\n3 min\n\n\n\n\n\n\n  \n\n\n\n\nNFL in 2022\n\n\n\n\n\n\n\n\n\nDec 11, 2023\n\n\nBenjamin DesJardins\n\n\n2 min\n\n\n\n\n\n\n  \n\n\n\n\nBeer Market\n\n\n\n\n\n\n\n\n\nDec 11, 2023\n\n\nBenjamin DesJardins\n\n\n4 min\n\n\n\n\n\n\n  \n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\n\n\nDec 4, 2023\n\n\nBenjamin DesJardins\n\n\n1 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "danl-200-cw-10.html",
    "href": "danl-200-cw-10.html",
    "title": "danl-200-cw-10",
    "section": "",
    "text": "&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD"
  },
  {
    "objectID": "danl-200-cw-10.html#quarto",
    "href": "danl-200-cw-10.html#quarto",
    "title": "danl-200-cw-10",
    "section": "Quarto",
    "text": "Quarto\nQuarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org."
  },
  {
    "objectID": "danl-200-cw-10.html#running-code",
    "href": "danl-200-cw-10.html#running-code",
    "title": "danl-200-cw-10",
    "section": "Running Code",
    "text": "Running Code\nWhen you click the Render button a document will be generated that includes both content and the output of embedded code. You can embed code like this:\n\n1 + 1\n\n[1] 2\n\n\nYou can add options to executable code like this\n\n\n[1] 4"
  },
  {
    "objectID": "danl-200-cw-10.html#quarto-1",
    "href": "danl-200-cw-10.html#quarto-1",
    "title": "danl-200-cw-10",
    "section": "Quarto",
    "text": "Quarto\nQuarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org."
  },
  {
    "objectID": "danl-200-cw-10.html#running-code-1",
    "href": "danl-200-cw-10.html#running-code-1",
    "title": "danl-200-cw-10",
    "section": "Running Code",
    "text": "Running Code\nWhen you click the Render button a document will be generated that includes both content and the output of embedded code. You can embed code like this:\n\n1 + 1\n\n[1] 2\n\n\nYou can add options to executable code like this\n\n\n[1] 4\n\n\nThe echo: false option disables the printing of code (only output is displayed). &gt;&gt;&gt;&gt;&gt;&gt;&gt; 5e3e32c4deb6720d0dd92d2986572dd6117430dd"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Benjamin DesJardins",
    "section": "",
    "text": "Benjamin DesJardins majors in Mathematics at SUNY Geneseo, with a focus on actuarial science. In his free time, Ben enjoys cooking, playing The Sims, and walking his two dogs."
  },
  {
    "objectID": "index.html#education",
    "href": "index.html#education",
    "title": "Benjamin DesJardins",
    "section": "Education",
    "text": "Education\nState University of New York at Geneseo | Geneseo, NY  B.A. in Mathematics | Jan 2023 - Dec 2024 \nJefferson Commnunity College | Watertown, NY  A.S. in Mathematics | Sep 2020 - Dec 2022"
  },
  {
    "objectID": "index.html#experience",
    "href": "index.html#experience",
    "title": "Benjamin DesJardins",
    "section": "Experience",
    "text": "Experience\nWatertown Savings Bank | Bank Teller | May 2023 - Present \nAmerican Eagle Outfitters | Sales Associate | Jul 2021 - Present \nAmerican Eagle Outfitters | Assistant Merchandise Team Leader | Apr 2022 - Jan 2023 \nJefferson Community College | Peer Tutor | Oct 2022 - Dec 2022"
  },
  {
    "objectID": "posts/beer_market/index.html",
    "href": "posts/beer_market/index.html",
    "title": "NFL in 2022",
    "section": "",
    "text": "Analyze the beer_markets.csv data.\n\n\nQuestion 2\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(skimr)\nNFL2022_stuffs &lt;- read_csv('https://bcdanl.github.io/data/NFL2022_stuffs.csv')\n\nRows: 50147 Columns: 10\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): game_id, posteam\ndbl (8): play_id, drive, week, qtr, down, half_seconds_remaining, pass, wp\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nQ2a\nIn data.frame, NFL2022_stuffs, remove observations for which values of posteam is missing.\n\nNFL2022_stuffs &lt;- NFL2022_stuffs %&gt;%\n  filter(!is.na(posteam))\n\n\n\nQ2b\nSummarize the mean value of pass for each posteam when all the following conditions hold: wp is greater than 20% and less than 75%; down is less than or equal to 2; and half_seconds_remaining is greater than 120.\n\nq2b &lt;- NFL2022_stuffs %&gt;% \n  filter(wp &gt; .2 & wp &lt;.75) %&gt;% \n  filter(down &lt;= 2) %&gt;% \n  filter(half_seconds_remaining &gt; 120) %&gt;% \n  group_by(posteam) %&gt;% \n  summarise(mean_pass = mean(pass))\n\n\n\nQ2c\nProvide both (1) a ggplot code with geom_point() using the resulting data.frame in Q2b and (2) a simple comments to describe the mean value of pass for each posteam. In the ggplot, reorder the posteam categories based on the mean value of pass in ascending or in descending order.\n\nq2c &lt;- q2b %&gt;% \n  arrange(desc(mean_pass))\n\nggplot(q2c) + \n  geom_point(aes(x = reorder(posteam, -mean_pass), y = mean_pass))\n\n\n\n\n\n\nQ2d\n\nNFL2022_epa &lt;- read_csv('https://bcdanl.github.io/data/NFL2022_epa.csv')\n\nRows: 46427 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): game_id, posteam, receiver, passer\ndbl (3): play_id, drive, epa\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCreate the data.frame, NFL2022_stuffs_EPA, that includes\nAll the variables in the data.frame, NFL2022_stuffs; The variables, passer, receiver, and epa, from the data.frame, NFL2022_epa. by joining the two data.frames. In the resulting data.frame, NFL2022_stuffs_EPA, remove observations with NA in passer.\n\nNFL2022_stuffs_EPA &lt;- NFL2022_stuffs %&gt;% \n  left_join(NFL2022_epa, by = \"game_id\")\n\nWarning in left_join(., NFL2022_epa, by = \"game_id\"): Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 1 of `x` matches multiple rows in `y`.\nℹ Row 1 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n\nNFL2022_stuffs_EPA &lt;- NFL2022_stuffs_EPA %&gt;%\n  filter(!is.na(passer))\n\n\n\nQ2e\nProvide both (1) a single ggplot and (2) a simple comment to describe the NFL weekly trend of weekly mean value of epa for each of the following two passers, \"J.Allen\" \"P.Mahomes\"\n\npassers &lt;- c(\"J.Allen\",\"P.Mahomes\")\nq2e &lt;- NFL2022_stuffs_EPA %&gt;% \n  filter(passer %in% passers) %&gt;% \n  group_by(passer, week) %&gt;% \n  summarise(mean = mean(epa))\n\n`summarise()` has grouped output by 'passer'. You can override using the\n`.groups` argument.\n\nggplot(q2e, aes(x = week, y = mean, color = passer)) +\n  geom_line() +\n  geom_point()\n\n\n\n\nOverall, P.Mahomes has a higher average EPA for most weeks of the NFL. J.Allen has some of the lowest EPA’s for each week.\n\n\nQ2f\nCalculate the difference between the mean value of epa for “J.Allen” the mean value of epa for “P.Mahomes” for each value of week. ```"
  },
  {
    "objectID": "posts/NFL/index.html",
    "href": "posts/NFL/index.html",
    "title": "Beer Market",
    "section": "",
    "text": "Analyze the beer_markets.csv data.\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(skimr)\nbeer_mkts &lt;- \n  read_csv('https://bcdanl.github.io/data/beer_markets.csv')\n\nRows: 73115 Columns: 24\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (13): _purchase_desc, brand, container, market, buyertype, income, age, ...\ndbl  (5): hh, quantity, dollar_spent, beer_floz, price_per_floz\nlgl  (6): promo, childrenUnder6, children6to17, microwave, dishwasher, singl...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nQ1a\nFind the top 5 markets in terms of the total beer_floz. Find the top 5 markets in terms of the total beer_floz of BUD LIGHT. Find the top 5 markets in terms of the total beer_floz of BUSCH LIGHT. Find the top 5 markets in terms of the total beer_floz of COORS LIGHT. Find the top 5 markets in terms of the total beer_floz of MILLER LITE. Find the top 5 markets in terms of the total beer_floz of NATURAL LIGHT.\n\nQ2a1 &lt;- beer_mkts %&gt;% \n   group_by(market) %&gt;% \n   summarize(beer_floz_tot = sum(beer_floz, na.rm = T)) %&gt;% \n   arrange(-beer_floz_tot) %&gt;% \n   slice(1:5)\n\nQ2a_bud &lt;- beer_mkts %&gt;% \n  filter(brand == \"BUD LIGHT\") %&gt;% \n  group_by(market) %&gt;% \n  summarize(beer_floz_tot = sum(beer_floz, na.rm = T)) %&gt;% \n  arrange(-beer_floz_tot) %&gt;% \n  slice(1:5)\n\nQ2a_busch &lt;- beer_mkts %&gt;% \n  filter(brand == \"BUSCH LIGHT\") %&gt;% \n  group_by(market) %&gt;% \n  summarize(beer_floz_tot = sum(beer_floz, na.rm = T)) %&gt;% \n  arrange(-beer_floz_tot) %&gt;% \n  slice(1:5)\n\nQ2a_coors &lt;- beer_mkts %&gt;% \n  filter(brand == \"COORS LIGHT\") %&gt;% \n  group_by(market) %&gt;% \n  summarize(beer_floz_tot = sum(beer_floz, na.rm = T)) %&gt;% \n  arrange(-beer_floz_tot) %&gt;% \n  slice(1:5)\n\nQ2a_miller &lt;- beer_mkts %&gt;% \n  filter(brand == \"MILLER LITE\") %&gt;% \n  group_by(market) %&gt;% \n  summarize(beer_floz_tot = sum(beer_floz, na.rm = T)) %&gt;% \n  arrange(-beer_floz_tot) %&gt;% \n  slice(1:5)\n\nQ2a_natural &lt;- beer_mkts %&gt;% \n  filter(brand == \"NATURAL LIGHT\") %&gt;% \n  group_by(market) %&gt;% \n  summarize(beer_floz_tot = sum(beer_floz, na.rm = T)) %&gt;% \n  arrange(-beer_floz_tot) %&gt;% \n  slice(1:5)\n\n\n\nQ2b\nFor households that purchased BUD LIGHT at least once, what fraction of households did purchase only BUD LIGHT?\nFor households that purchased BUSCH LIGHT at least once, what fraction of households did purchase only BUSCH LIGHT?\nFor households that purchased COORS LIGHT at least once, what fraction of households did purchase only COORS LIGHT?\nFor households that purchased MILLER LITE at least once, what fraction of households did purchase only MILLER LITE?\nFor households that purchased NATURAL LIGHT at least once, what fraction of households did purchase only NATURAL LIGHT?\nWhich beer brand does have the largest proportion of such loyal consumers?\n\nq2b &lt;- beer_mkts %&gt;% \n  mutate(bud = ifelse(brand==\"BUD LIGHT\", 1, 0), # 1 if brand==\"BUD LIGHT\"; 0 otherwise\n         busch = ifelse(brand==\"BUSCH LIGHT\", 1, 0),\n         coors = ifelse(brand==\"COORS LIGHT\", 1, 0),\n         miller = ifelse(brand==\"MILLER LITE\", 1, 0),\n         natural = ifelse(brand==\"NATURAL LIGHT\", 1, 0),\n         .after = hh) %&gt;% \n  select(hh:natural) %&gt;%  # select the variables we need\n  group_by(hh) %&gt;% \n  summarise(n_transactions = n(), # number of beer transactions for each hh\n            n_bud = sum(bud), # number of BUD LIGHT transactions for each hh\n            n_busch = sum(busch), \n            n_coors = sum(coors), \n            n_miller = sum(miller), \n            n_natural = sum(natural) \n  ) %&gt;% \n  summarise(loyal_bud = sum(n_transactions == n_bud) / sum(n_bud &gt; 0), \n              # sum(n_transactions == n_bud) : the number of households that purchased BUD LIGHT only\n              # sum(n_bud &gt; 0) : the number of households that purchased BUD LIGHT at least once.\n            loyal_busch = sum(n_transactions == n_busch) / sum(n_busch &gt; 0),\n            loyal_coors = sum(n_transactions == n_coors) / sum(n_coors &gt; 0),\n            loyal_miller = sum(n_transactions == n_miller) / sum(n_miller &gt; 0),\n            loyal_natural = sum(n_transactions == n_natural) / sum(n_natural &gt; 0)\n  )\n\n\n\nQ2c\nFor each household, calculate the number of beer transactions. For each household, calculate the proportion of each beer brand choice.\n\nq2c &lt;- beer_mkts %&gt;% \n  count(hh, brand) %&gt;% \n  group_by(hh) %&gt;% \n  mutate(n_tot = sum(n)) %&gt;%  # n_tot : the number of beer transactions\n  arrange(hh, brand) %&gt;% \n  mutate( prop = n / n_tot ) # prop: the proportion of each beer brand choice"
  },
  {
    "objectID": "posts/nyc_rest/index.html",
    "href": "posts/nyc_rest/index.html",
    "title": "NYC Restaurant Inspection",
    "section": "",
    "text": "Analyze the DOHMH_NYC_Restaurant_Inspection.csv data.\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(skimr)\nrestaurant &lt;- \n  read_csv('https://bcdanl.github.io/data/DOHMH_NYC_Restaurant_Inspection.csv')\n\nRows: 17633 Columns: 12\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (10): DBA, BORO, STREET, CUISINE DESCRIPTION, INSPECTION DATE, ACTION, V...\ndbl  (2): CAMIS, SCORE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n#Q1a) What are the mean, standard deviation, first quartile, median, third quartile, and maximum of SCORE for each GRADE of restaurants?\n\nscorePerGrade &lt;- restaurant %&gt;% \n  group_by(restaurant$GRADE) %&gt;%\n  summarize(\n    score_mean = mean(SCORE),\n    score_sd = sd(SCORE),\n    score_min = min(SCORE),\n    score_q1 = quantile(SCORE, probs = .25),\n    score_median = median(SCORE),\n    score_q1 = quantile(SCORE, probs = .75),\n    score_max = max(SCORE) )\n\n#Q1b) How many restaurants with a GRADE of A are there in NYC? How much percentage of restaurants in NYC are a GRADE of C?\n\nnumObs &lt;- restaurant %&gt;% \n  group_by(GRADE) %&gt;% \n  summarize( number = n())\n\n16305 with a grade of A\n\n294 / sum(numObs$number) * 100 \n\n[1] 1.667328\n\n\nPercentage with grade C\n#Q1c)\nProvide both (1) ggplot code and (2) a simple comment to describe how the distribution of SCORE varies by GRADE and CRITICAL FLAG.\n\nggplot( data = restaurant) +\n  geom_histogram(aes(x = SCORE, fill = restaurant$`CRITICAL FLAG`), bins = 50) +\n  facet_grid(. ~ GRADE)\n\n\n\n\nCritical makes up the majority of each grade, and those with the grade A has the highest and most varied scores, those with grade C have much larger scores\n#Q1d) Provide both (1) ggplot code and (2) a simple comment to describe how the proportion of CRITICAL FLAG varies by GRADE and BORO.\n\nggplot(data = restaurant) + \n  geom_bar(aes(x = GRADE, fill = BORO)) +\n  facet_wrap(. ~ `CRITICAL FLAG`)\n\n\n\n\nStaten Island and Bronx make up the smallest proportions of boroughs.\nManhattan makes up the largest proportion of each grade. Critical and Not Critical have very similar distributions.\n#Q1e) For the 10 most common CUISINE DESCRIPTION values, find the CUISINE DESCRIPTION value that has the highest proportion of GRADE A.\n\ncuiseDescrip &lt;-  restaurant %&gt;% \n  group_by(`CUISINE DESCRIPTION`) %&gt;%\n  summarise(count = n()) %&gt;% \n  arrange(-count) %&gt;% \n  mutate()\n\nhead(cuiseDescrip, 10)\n\n# A tibble: 10 × 2\n   `CUISINE DESCRIPTION`    count\n   &lt;chr&gt;                    &lt;int&gt;\n 1 American                  3678\n 2 Coffee/Tea                1414\n 3 Chinese                   1372\n 4 Pizza                     1050\n 5 Italian                    689\n 6 Bakery Products/Desserts   615\n 7 Japanese                   584\n 8 Mexican                    582\n 9 Latin American             544\n10 Donuts                     505\n\n\n#Q1f) Find the 3 most common names of restaurants (DBA) in each BORO. If the third most common DBA values are multiple, please include all the DBA values.\n\nq2f &lt;- restaurant %&gt;% \n  select(DBA, BORO) %&gt;% \n  group_by(BORO, DBA) %&gt;% \n  summarize(n = n()) %&gt;% \n  mutate(ranking = dense_rank(-n)) %&gt;% \n  filter(ranking &lt;= 3) %&gt;% \n  arrange(BORO, ranking)\n\n`summarise()` has grouped output by 'BORO'. You can override using the\n`.groups` argument.\n\nq2f_ &lt;- restaurant %&gt;% \n  group_by(DBA) %&gt;% \n  count() %&gt;% \n  arrange(-n)\n\n#Q1g) For all the DBA values that appear in the result of Q1f, find the DBA value that is most likely to commit critical violation.\n\nq2g &lt;- restaurant %&gt;% \n  filter(DBA %in% q2f$DBA) %&gt;% \n  group_by(DBA, `CRITICAL FLAG`) %&gt;% \n  count() %&gt;% \n  group_by(DBA) %&gt;% \n  mutate(lag_n = lag(n),\n         tot = sum(n),\n         prop_crit = lag_n / tot) %&gt;% \n  select(DBA, prop_crit) %&gt;% \n  filter(!is.na(prop_crit)) %&gt;% \n  arrange(-prop_crit)"
  },
  {
    "objectID": "posts/spotify/index.html",
    "href": "posts/spotify/index.html",
    "title": "Spotify Data",
    "section": "",
    "text": "Analyze the spotify_all.csv data.\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(skimr)\nspotify_all &lt;- \n  read_csv('https://bcdanl.github.io/data/spotify_all.csv')\n\nRows: 198005 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): playlist_name, artist_name, track_name, album_name\ndbl (3): pid, pos, duration_ms\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nQ1a\nFind the top 10 most popular songs\n\nQ1a &lt;- spotify_all %&gt;% \n  count(artist_name, track_name) %&gt;% \n  arrange(-n) %&gt;% \n  head(10)\n\n\n\nQ1b\nFind the five most popular artist in terms of the number of occurrences in the data.frame, spotify_all What is the most popular song for each of the five most popular artist?\n\nQ1b &lt;- spotify_all %&gt;% \n  group_by(artist_name) %&gt;% \n  mutate(n_popular_artist = n()) %&gt;% \n  ungroup() %&gt;% \n  mutate( artist_ranking = dense_rank( desc(n_popular_artist) ) ) %&gt;% \n  filter( artist_ranking &lt;= 5) %&gt;% \n  group_by(artist_name, track_name) %&gt;% \n  mutate(n_popular_track = n()) %&gt;% \n  group_by(artist_name) %&gt;% \n  mutate(track_ranking = dense_rank( desc(n_popular_track) ) ) %&gt;% \n  filter( track_ranking &lt;= 2) %&gt;%   # I just wanted to see the top two tracks for each artist\n  select(artist_name, artist_ranking, n_popular_artist, track_name, track_ranking, n_popular_track) %&gt;% \n  distinct() %&gt;% \n  arrange(artist_ranking, track_ranking)\n\n\n\nQ1C\nProvide both (1) ggplot codes and (2) a couple of sentences to describe the relationship between pos and the ten most popular artists.\n\nQ1c &lt;- spotify_all %&gt;% \n  group_by(artist_name) %&gt;% \n  mutate(n_popular_artist = n()) %&gt;% \n  ungroup() %&gt;% \n  mutate( artist_ranking = dense_rank( desc(n_popular_artist) ) ) %&gt;% \n  filter( artist_ranking &lt;= 10) \n  \n# boxplot\nggplot(Q1c,\n       aes(x = pos, y = fct_reorder(artist_name, -artist_ranking)) ) +\n  geom_boxplot() +\n  stat_summary(\n    fun = mean,\n    color = 'red'\n  )\n\nWarning: Removed 10 rows containing missing values (`geom_segment()`).\n\n\n\n\n\n\n# histogram\nggplot(Q1c) +\n  geom_histogram(aes(x = pos), binwidth = 1) + \n  facet_grid(fct_reorder(artist_name, artist_ranking) ~ .  , switch = \"y\") +\n  theme(strip.text.y.left = element_text(angle = 0))"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "project.html#summary-statistics",
    "href": "project.html#summary-statistics",
    "title": "DANL Project",
    "section": "2.1 Summary Statistics",
    "text": "2.1 Summary Statistics\n\nnyc_estate &lt;- read_csv(\"https://bendesjardins.github.io/nyc-rolling-sales.csv\")"
  },
  {
    "objectID": "project.html#distribution-of-key-data",
    "href": "project.html#distribution-of-key-data",
    "title": "DANL Project",
    "section": "2.2 Distribution of Key Data",
    "text": "2.2 Distribution of Key Data\n\n2.2.1 Sale Price\n\nclean_sale &lt;- nyc_estate %&gt;% \n  filter(!(`SALE PRICE` == \"-\"))\n\nggplot(data = clean_sale) +\n  geom_histogram(aes(x = log(as.numeric(`SALE PRICE`))), bins = 200) +\n  labs(x = \"Log of `Sale Price`\")\n\n\n\n\nAfter taking the log of Sale Price, we can see that there seems to be a pretty normal distrbution with a few outliers near the lower range of data.\n\n\n2.2.2 TAX CLASS AT TIME OF SALE\n\nggplot(data = nyc_estate) +\n  geom_bar(aes(x = `TAX CLASS AT TIME OF SALE`))\n\n\n\n\nTAX CLASS AT TIME OF SALE is a categorical variable taking on the values of 1, 2, and 4 with most of the variables being either a 1 or 2.\n\n\n2.2.3 YEAR BUILT\n\nclean_year &lt;- nyc_estate %&gt;% \n  filter(!(`YEAR BUILT` == 0))\n\nggplot(data = clean_year) + \n  geom_histogram(aes(x = `YEAR BUILT`), bins = 100) + \n  scale_x_continuous(limits = c(1800, 2020))"
  },
  {
    "objectID": "project.html#comparison-with-sale-price",
    "href": "project.html#comparison-with-sale-price",
    "title": "DANL Project",
    "section": "2.3 Comparison with Sale Price",
    "text": "2.3 Comparison with Sale Price\n\n2.3.1 Sale Price versus Tax Class At Time of Sale\n\nggplot(data = clean_sale) +\n  geom_histogram(aes(x = log(as.numeric(`SALE PRICE`)), \n                     color = `TAX CLASS AT TIME OF SALE`), bins = 100) +\n  facet_wrap(. ~ `TAX CLASS AT TIME OF SALE`, scales = 'free') +\n  labs(x = \"Log of `SALE PRICE`\")\n\n\n\n\nThey all have some resemblance of a normal distribution, with those at a tax class of 2 having the most normal distribution. Those in the 4 class has the most skewed data with many outliers in proportion to the rest of those in 1 and 2.\n\n\n2.3.2 Sale Price versus Year Built\n\nclean_year_sale &lt;- clean_sale %&gt;% \n  filter(!(`YEAR BUILT` == 0))\n\nggplot(data = clean_year_sale) +\n  geom_point(aes(x = log(as.numeric(`SALE PRICE`)), y = `YEAR BUILT`), alpha = .02) +\n  scale_y_continuous(limits = c(1900, 2020))\n\n\n\ncor(as.numeric(clean_year_sale$`SALE PRICE`), clean_year_sale$`YEAR BUILT`)\n\n[1] 0.006318972\n\n\nAs the figure shows, there is very little correlation between year built and sale price. If we take the correlation value between them, we get less than 0.01 which means there is essentially no correlation.\n\n\n2.3.3 Tax Class at Time of Sale versus Year Built\n\nggplot(data = clean_year) +\n  geom_histogram(aes(x = `YEAR BUILT`), bins = 50) +\n  facet_wrap(. ~ `TAX CLASS AT TIME OF SALE`) + \n  scale_x_continuous(limits = c(1900, 2020))"
  },
  {
    "objectID": "quarto-template.html",
    "href": "quarto-template.html",
    "title": "DANL 200: Introduction to Data AnalyticsProject",
    "section": "",
    "text": "oj &lt;- read_csv('https://bcdanl.github.io/data/dominick_oj.csv')\nnvars &lt;- format(round(ncol(oj), 0), \n                nsmall=0, \n                big.mark=\",\") \nnobs &lt;- format(round(nrow(oj), 0), \n                nsmall=0, \n                big.mark=\",\")\nThe number of variables is 4; the number of observations is 28,947.\nRoses are red\nviolets are blue."
  },
  {
    "objectID": "quarto-template.html#data-summary",
    "href": "quarto-template.html#data-summary",
    "title": "DANL 200: Introduction to Data AnalyticsProject",
    "section": "2.1 Data Summary",
    "text": "2.1 Data Summary\n\nSummary statistics (Use skimr::skim())"
  },
  {
    "objectID": "quarto-template.html#data-visualization",
    "href": "quarto-template.html#data-visualization",
    "title": "DANL 200: Introduction to Data AnalyticsProject",
    "section": "2.2 Data Visualization",
    "text": "2.2 Data Visualization\n\noj %&gt;% \n  ggplot(aes(x = log(sales), \n             y = log(price),\n             color = brand)) +\n  geom_point(alpha = .1) +\n  geom_smooth(method = lm, se = F) +\n  facet_wrap(.~ad) +\n  theme_bw() +\n  theme(legend.position = 'top')"
  },
  {
    "objectID": "quarto-template.html#data-transformation",
    "href": "quarto-template.html#data-transformation",
    "title": "DANL 200: Introduction to Data AnalyticsProject",
    "section": "2.3 Data Transformation",
    "text": "2.3 Data Transformation\n\nob_sum1 &lt;- oj %&gt;% \n  group_by(brand, ad) %&gt;% \n  summarise(sales_tot = sum(sales, na.rm = T),\n            price_mean = round(mean(price, na.rm = T), 2))"
  },
  {
    "objectID": "quarto-template.html#analysis",
    "href": "quarto-template.html#analysis",
    "title": "DANL 200: Introduction to Data AnalyticsProject",
    "section": "2.4 Analysis",
    "text": "2.4 Analysis"
  },
  {
    "objectID": "quarto-template.html#quotes",
    "href": "quarto-template.html#quotes",
    "title": "DANL 200: Introduction to Data AnalyticsProject",
    "section": "2.5 Quotes",
    "text": "2.5 Quotes\n\nQuote with &gt;\n\n\n“The truth is rarely pure and never simple.”\n— Oscar Wilde"
  },
  {
    "objectID": "quarto-template.html#inserting-figures",
    "href": "quarto-template.html#inserting-figures",
    "title": "DANL 200: Introduction to Data AnalyticsProject",
    "section": "2.6 Inserting Figures",
    "text": "2.6 Inserting Figures\nFor a demonstration of a DANL tiger, see Figure 1.\n\n\n\n\n\nFigure 1: DANL Tiger"
  },
  {
    "objectID": "quarto-template.html#inserting-a-html-page",
    "href": "quarto-template.html#inserting-a-html-page",
    "title": "DANL 200: Introduction to Data AnalyticsProject",
    "section": "2.7 Inserting a HTML page",
    "text": "2.7 Inserting a HTML page"
  },
  {
    "objectID": "project.html",
    "href": "project.html",
    "title": "DANL Project",
    "section": "",
    "text": "Introduction to the NYC Rolling Sales Dataset\nThe NYC Rolling Sales dataset provides a comprehensive overview of real estate transactions within New York City. Compiled from the city’s rolling sales data, this dataset encompasses a wide range of property sales, offering insights into the dynamic and diverse real estate market of one of the world’s most iconic metropolitan areas.\nKey Information:\nSource: NYC Department of Finance Coverage: The dataset includes information on sales transactions across various boroughs, capturing the intricacies of the city’s real estate landscape. Columns: Essential details such as property address, sale price, sale date, borough, tax class code, and other pertinent information are included. Objective: The primary objective of this dataset is to facilitate analysis and exploration of real estate trends, patterns, and market dynamics within New York City. Researchers, analysts, and enthusiasts can leverage this dataset to gain insights into property values, transaction volumes, and the distribution of sales across different tax class codes and boroughs.\nUsage: This dataset is valuable for a variety of purposes, including market research, trend analysis, and the identification of patterns that may influence property values. It provides a robust foundation for those interested in understanding the factors influencing real estate transactions in the diverse neighborhoods of New York City.\nAccessing the Data: The dataset is publicly accessible and can be obtained from the NYC Department of Finance. In this analysis, we utilize the dataset available at https://bendesjardins.github.io/nyc-rolling-sales.csv."
  },
  {
    "objectID": "project.html#analysis-of-buildings",
    "href": "project.html#analysis-of-buildings",
    "title": "DANL Project",
    "section": "2.4 Analysis of Buildings",
    "text": "2.4 Analysis of Buildings\n\n2.4.1 Number of Buildings\n\nnyc_estate &lt;- read_csv(\"https://bendesjardins.github.io/nyc-rolling-sales.csv\")\n\n\nnum_buildings &lt;- nrow(nyc_estate)\n\ncat(\"The number of buildings is:\", num_buildings, \"\\n\")\n\nThe number of buildings is: 84548 \n\n\n\n\n2.4.2 Number of Apartments Per Borough\n1 = Manhattan 2 = Bronx 3 = Brooklyn 4 = Queens 5 = Staten Island\n\napartments_per_borough &lt;- nyc_estate %&gt;%\n  group_by(BOROUGH) %&gt;%\n  summarize(Number_of_Apartments = n())\n\nprint(apartments_per_borough)\n\n# A tibble: 5 × 2\n  BOROUGH Number_of_Apartments\n    &lt;dbl&gt;                &lt;int&gt;\n1       1                18306\n2       2                 7049\n3       3                24047\n4       4                26736\n5       5                 8410\n\nggplot(apartments_per_borough, aes(x = factor(BOROUGH), y = Number_of_Apartments, fill = factor(BOROUGH))) +\n  geom_bar(stat = \"identity\", color = \"black\", alpha = 0.7) +\n  labs(title = \"Number of Apartments per Borough\",\n       x = \"Borough\",\n       y = \"Number of Apartments\",\n       fill = \"Borough\") +\n  theme_minimal()\n\n\n\n\n\n\n2.4.3 Buildings in the same Zipcodes\n\nbuildings_per_zip &lt;- nyc_estate %&gt;%\n  group_by(`ZIP CODE`) %&gt;%\n  summarize(Number_of_Buildings = n())\n\nprint(buildings_per_zip)\n\n# A tibble: 186 × 2\n   `ZIP CODE` Number_of_Buildings\n        &lt;dbl&gt;               &lt;int&gt;\n 1          0                 982\n 2      10001                 204\n 3      10002                 328\n 4      10003                 812\n 5      10004                  95\n 6      10005                 199\n 7      10006                 184\n 8      10007                 313\n 9      10009                 244\n10      10010                 459\n# ℹ 176 more rows\n\n\n\n\n2.4.4 Buildings in same Tax Class\n\nbuildings_per_tax_class &lt;- nyc_estate %&gt;%\n  group_by(`TAX CLASS AT PRESENT`) %&gt;%\n  summarize(Number_of_Buildings = n())\n\n# Create a scatter plot for the number of buildings per tax class\nggplot(buildings_per_tax_class, aes(x = `TAX CLASS AT PRESENT`, y = Number_of_Buildings, color = `TAX CLASS AT PRESENT`)) +\n  geom_point(size = 3) +\n  labs(title = \"Number of Buildings per Tax Class\",\n       x = \"Tax Class\",\n       y = \"Number of Buildings\",\n       color = \"Tax Class\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))"
  },
  {
    "objectID": "project.html#commericial-and-residential-units",
    "href": "project.html#commericial-and-residential-units",
    "title": "DANL Project",
    "section": "2.5 Commericial and Residential Units",
    "text": "2.5 Commericial and Residential Units\n\n2.5.1 Number of Commercial Units\n\ncommercial_units &lt;- nyc_estate %&gt;%\n  filter(`BUILDING CLASS CATEGORY` %in% c(\"21 OFFICE BUILDINGS\"))\n\ntotal_commercial_units &lt;- sum(commercial_units$`TOTAL UNITS`)\n\n\ncat(\"Total Commercial Units:\", total_commercial_units, \"\\n\")\n\nTotal Commercial Units: 2305 \n\n\n\n\n2.5.2 Number of Residential Units\n\nresidential_units &lt;- nyc_estate %&gt;%\n  filter(`BUILDING CLASS CATEGORY` %in% c(\"01 ONE FAMILY DWELLINGS\", \"02 TWO FAMILY DWELLINGS\", \"10 COOPS - ELEVATOR APARTMENTS\"))\n\n\ntotal_residential_units &lt;- sum(residential_units$`TOTAL UNITS`)\n\ncat(\"Total Residential Units:\", total_residential_units, \"\\n\")\n\nTotal Residential Units: 63776 \n\n\n\n\n2.5.3 Highest and Lowest sold Residential Units\n\nindex_highest &lt;- which.max(residential_units$`SALE PRICE`)\n\nindex_lowest &lt;- which.min(residential_units$`SALE PRICE`)\n\n\nhighest_price_property &lt;- residential_units[index_highest, ]\nlowest_price_property &lt;- residential_units[index_lowest, ]\n\ncat(\"Residential Unit with Highest Sales Price:\\n\")\n\nResidential Unit with Highest Sales Price:\n\nprint(highest_price_property)\n\n# A tibble: 1 × 22\n   ...1 BOROUGH NEIGHBORHOOD BUILDING CLASS CATEG…¹ `TAX CLASS AT PRESENT` BLOCK\n  &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;        &lt;chr&gt;                  &lt;chr&gt;                  &lt;dbl&gt;\n1 11983       1 UPPER EAST … 10 COOPS - ELEVATOR A… 2                       1392\n# ℹ abbreviated name: ¹​`BUILDING CLASS CATEGORY`\n# ℹ 16 more variables: LOT &lt;dbl&gt;, `EASE-MENT` &lt;lgl&gt;,\n#   `BUILDING CLASS AT PRESENT` &lt;chr&gt;, ADDRESS &lt;chr&gt;, `APARTMENT NUMBER` &lt;chr&gt;,\n#   `ZIP CODE` &lt;dbl&gt;, `RESIDENTIAL UNITS` &lt;dbl&gt;, `COMMERCIAL UNITS` &lt;dbl&gt;,\n#   `TOTAL UNITS` &lt;dbl&gt;, `LAND SQUARE FEET` &lt;chr&gt;, `GROSS SQUARE FEET` &lt;chr&gt;,\n#   `YEAR BUILT` &lt;dbl&gt;, `TAX CLASS AT TIME OF SALE` &lt;dbl&gt;,\n#   `BUILDING CLASS AT TIME OF SALE` &lt;chr&gt;, `SALE PRICE` &lt;chr&gt;, …\n\n\n\ncat(\"\\nResidential Unit with Lowest Sales Price:\\n\")\n\n\nResidential Unit with Lowest Sales Price:\n\nprint(lowest_price_property)\n\n# A tibble: 1 × 22\n   ...1 BOROUGH NEIGHBORHOOD BUILDING CLASS CATEG…¹ `TAX CLASS AT PRESENT` BLOCK\n  &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;        &lt;chr&gt;                  &lt;chr&gt;                  &lt;dbl&gt;\n1     9       2 BATHGATE     01 ONE FAMILY DWELLIN… 1                       3048\n# ℹ abbreviated name: ¹​`BUILDING CLASS CATEGORY`\n# ℹ 16 more variables: LOT &lt;dbl&gt;, `EASE-MENT` &lt;lgl&gt;,\n#   `BUILDING CLASS AT PRESENT` &lt;chr&gt;, ADDRESS &lt;chr&gt;, `APARTMENT NUMBER` &lt;chr&gt;,\n#   `ZIP CODE` &lt;dbl&gt;, `RESIDENTIAL UNITS` &lt;dbl&gt;, `COMMERCIAL UNITS` &lt;dbl&gt;,\n#   `TOTAL UNITS` &lt;dbl&gt;, `LAND SQUARE FEET` &lt;chr&gt;, `GROSS SQUARE FEET` &lt;chr&gt;,\n#   `YEAR BUILT` &lt;dbl&gt;, `TAX CLASS AT TIME OF SALE` &lt;dbl&gt;,\n#   `BUILDING CLASS AT TIME OF SALE` &lt;chr&gt;, `SALE PRICE` &lt;chr&gt;, …\n\n\n\n\n2.5.4 Highest and Lowest sold Commercial Units\n\ncommercial_units &lt;- nyc_estate %&gt;%\n  filter(`BUILDING CLASS CATEGORY` %in% c(\"21 OFFICE BUILDINGS\"))\n\n\nhighest_price_property_commercial &lt;- commercial_units[which.max(commercial_units$`SALE PRICE`), ]\n\n\nlowest_price_property_commercial &lt;- commercial_units[which.min(commercial_units$`SALE PRICE`), ]\n\n\ncat(\"Commercial Unit with Highest Sales Price:\\n\")\n\nCommercial Unit with Highest Sales Price:\n\nprint(highest_price_property_commercial)\n\n# A tibble: 1 × 22\n   ...1 BOROUGH NEIGHBORHOOD BUILDING CLASS CATEG…¹ `TAX CLASS AT PRESENT` BLOCK\n  &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;        &lt;chr&gt;                  &lt;chr&gt;                  &lt;dbl&gt;\n1  7451       1 MIDTOWN CBD  21 OFFICE BUILDINGS    4                       1301\n# ℹ abbreviated name: ¹​`BUILDING CLASS CATEGORY`\n# ℹ 16 more variables: LOT &lt;dbl&gt;, `EASE-MENT` &lt;lgl&gt;,\n#   `BUILDING CLASS AT PRESENT` &lt;chr&gt;, ADDRESS &lt;chr&gt;, `APARTMENT NUMBER` &lt;chr&gt;,\n#   `ZIP CODE` &lt;dbl&gt;, `RESIDENTIAL UNITS` &lt;dbl&gt;, `COMMERCIAL UNITS` &lt;dbl&gt;,\n#   `TOTAL UNITS` &lt;dbl&gt;, `LAND SQUARE FEET` &lt;chr&gt;, `GROSS SQUARE FEET` &lt;chr&gt;,\n#   `YEAR BUILT` &lt;dbl&gt;, `TAX CLASS AT TIME OF SALE` &lt;dbl&gt;,\n#   `BUILDING CLASS AT TIME OF SALE` &lt;chr&gt;, `SALE PRICE` &lt;chr&gt;, …\n\n\n\ncat(\"\\nCommercial Unit with Lowest Sales Price:\\n\")\n\n\nCommercial Unit with Lowest Sales Price:\n\nprint(lowest_price_property_commercial)\n\n# A tibble: 1 × 22\n   ...1 BOROUGH NEIGHBORHOOD BUILDING CLASS CATEG…¹ `TAX CLASS AT PRESENT` BLOCK\n  &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;        &lt;chr&gt;                  &lt;chr&gt;                  &lt;dbl&gt;\n1   695       2 BEDFORD PAR… 21 OFFICE BUILDINGS    4                       3309\n# ℹ abbreviated name: ¹​`BUILDING CLASS CATEGORY`\n# ℹ 16 more variables: LOT &lt;dbl&gt;, `EASE-MENT` &lt;lgl&gt;,\n#   `BUILDING CLASS AT PRESENT` &lt;chr&gt;, ADDRESS &lt;chr&gt;, `APARTMENT NUMBER` &lt;chr&gt;,\n#   `ZIP CODE` &lt;dbl&gt;, `RESIDENTIAL UNITS` &lt;dbl&gt;, `COMMERCIAL UNITS` &lt;dbl&gt;,\n#   `TOTAL UNITS` &lt;dbl&gt;, `LAND SQUARE FEET` &lt;chr&gt;, `GROSS SQUARE FEET` &lt;chr&gt;,\n#   `YEAR BUILT` &lt;dbl&gt;, `TAX CLASS AT TIME OF SALE` &lt;dbl&gt;,\n#   `BUILDING CLASS AT TIME OF SALE` &lt;chr&gt;, `SALE PRICE` &lt;chr&gt;, …\n\n\n\n\n2.5.5 Scatter plot of highest and lowest sold units\n\nggplot(commercial_units, aes(x = `SALE PRICE`, y = `TOTAL UNITS`)) +\n  geom_point(color = \"skyblue\", size = 3) +\n  geom_point(data = highest_price_property_commercial, aes(x = `SALE PRICE`, y = `TOTAL UNITS`), color = \"red\", size = 3) +\n  geom_point(data = lowest_price_property_commercial, aes(x = `SALE PRICE`, y = `TOTAL UNITS`), color = \"green\", size = 3) +\n  labs(title = \"Scatter Plot for Highest and Lowest Sold Commercial Units\",\n       x = \"Sale Price\",\n       y = \"Total Units\") +\n  theme_minimal()\n\n\n\n\n\n\n2.5.6 Number of Buildings per Neighborhood\n\nbuildings_per_neighborhood &lt;- nyc_estate %&gt;%\n  group_by(`NEIGHBORHOOD`) %&gt;%\n  summarize(Number_of_Buildings = n())\n\n\nprint(buildings_per_neighborhood)\n\n# A tibble: 254 × 2\n   NEIGHBORHOOD         Number_of_Buildings\n   &lt;chr&gt;                              &lt;int&gt;\n 1 AIRPORT LA GUARDIA                     8\n 2 ALPHABET CITY                        204\n 3 ANNADALE                             198\n 4 ARDEN HEIGHTS                        278\n 5 ARROCHAR                              45\n 6 ARROCHAR-SHORE ACRES                  33\n 7 ARVERNE                              197\n 8 ASTORIA                             1216\n 9 BATH BEACH                           272\n10 BATHGATE                              68\n# ℹ 244 more rows\n\n\n\n\n2.5.7 Number of Buildings most and lowest in a block\n\nbuildings_per_block &lt;- nyc_estate %&gt;%\n  group_by(BLOCK) %&gt;%\n  summarize(Number_of_Buildings = n())\n\n\nmost_buildings_block &lt;- buildings_per_block %&gt;%\n  filter(Number_of_Buildings == max(Number_of_Buildings))\n\n\nfewest_buildings_block &lt;- buildings_per_block %&gt;%\n  filter(Number_of_Buildings == min(Number_of_Buildings))\n\n\ncat(\"Block with Most Buildings:\\n\")\n\nBlock with Most Buildings:\n\nprint(most_buildings_block)\n\n# A tibble: 1 × 2\n  BLOCK Number_of_Buildings\n  &lt;dbl&gt;               &lt;int&gt;\n1  5066                 404\n\ncat(\"Block with Fewest Buildings:\\n\")\n\nBlock with Fewest Buildings:\n\nprint(fewest_buildings_block)\n\n# A tibble: 1,983 × 2\n   BLOCK Number_of_Buildings\n   &lt;dbl&gt;               &lt;int&gt;\n 1     5                   1\n 2    19                   1\n 3    22                   1\n 4    48                   1\n 5    71                   1\n 6    83                   1\n 7    88                   1\n 8   112                   1\n 9   113                   1\n10   126                   1\n# ℹ 1,973 more rows\n\nggplot(buildings_per_block, aes(x = Number_of_Buildings)) +\n  geom_freqpoly(binwidth = 1, fill = \"skyblue\", color = \"black\", alpha = 0.7) +\n  labs(title = \"Frequency Polygon of Number of Buildings per Block\",\n       x = \"Number of Buildings\",\n       y = \"Frequency\") +\n  theme_minimal()"
  },
  {
    "objectID": "project.html#findings-regarding-sale-price",
    "href": "project.html#findings-regarding-sale-price",
    "title": "DANL Project",
    "section": "3.1 Findings Regarding Sale Price",
    "text": "3.1 Findings Regarding Sale Price\nSALE PRICE had a normal distribution with some degree of outliers either at a price of 0 or something very low. This can be contributed to pieces of land being given away at a low price or other some either reason than just to be sold. SALE PRICE was compared primarily with TAX CLASS AT TIME OF SALE and YEAR BUILT to determine any correlations. When it came it TAX CLASS AT TIME OF SALE, SALE PRICE kept a similar normal distribution to the original data, all of it falling into the same general range. However, buildings with a tax class of 4 had the highest proportion of outliers compared to the rest of the data, as the figure in 2.3.1 shows. This implies that aside from having a higher chance of being a very low sale given that the building was in the tax class of 4, no assumptions can be made about the SALE PRICE with a varying tax class.\nAnother variable tested was YEAR BUILT and as demonstrated by calculating the correlation coefficient and the graph in 2.3.2, there is essentially no correlation between the two variables."
  },
  {
    "objectID": "project.html#findings-regarding-number-of-buildings",
    "href": "project.html#findings-regarding-number-of-buildings",
    "title": "DANL Project",
    "section": "3.2 Findings Regarding Number of Buildings",
    "text": "3.2 Findings Regarding Number of Buildings\nAnother topic assessed was how the distribution of buildings related to other variables. The first thing recognized was the distribution of buildings in comparison to which borough they were located. The most common location was in Queens (4), and the least number of apartments sold was in the Bronx. Another variable studied in relation to number of buildings was TAX CLASS. The most common tax classes were 1 and 2, in a range of 30000 to 40000 buildings (Out of 80000 total buildings). There were a select few in the 4 category, and some of the sub categories had anywhere from 1000 to 3000 buildings. Three was the least common tax class, as demonstrated by some of the previous graphs."
  },
  {
    "objectID": "project.html#findings-regarding-commercial-versus-residential-units",
    "href": "project.html#findings-regarding-commercial-versus-residential-units",
    "title": "DANL Project",
    "section": "3.3 Findings Regarding Commercial versus Residential Units",
    "text": "3.3 Findings Regarding Commercial versus Residential Units\nOne of the last topics considered was whether or not buildings were commercial/residential units. This was done by filtering the BUILDING CLASS CATEGORY, where those that were listed as 21 OFFICE BUILDINGS were classified was commercial, and those that were family dwellings/coops were marked as residential. Residential Units greatly outnumbered commercial units, with a ratio of 63776 : 2305 or about 55 : 2. Thus the findings regarding residential units have more data to back it up. Both the top ten buildings with the lowest SALE PRICE and highest SALE PRICE for both commercial and residential buildings were found to provide insight to what differences may come up. The figure in 2.5.5 showcases where these buildings land in comparison with the rest."
  }
]